# Aliases for Taskwarrior (https://taskwarrior.org)

if has_command task; then
  function t {
    [[ "${_TASK_CLEAR:-0}" = 1 ]] && clear
    task "$@"
  }

  function tp {
    [[ "${_TASK_CLEAR:-0}" = 1 ]] && clear
    local project=${_TASK_PROJECT:-}
    echo "Task project:$project"
    task project:$project "$@"
  }

  function t.focus {
    local project=${1:-}
    if [[ -z $project ]] && has_command fzf; then
      project="$(task _projects | fzf)"
    fi
    if [[ -z $project ]]; then
      echo "Unfocused"
      unset _TASK_PROJECT
    else
      echo "Focused on '$project'"
      export _TASK_PROJECT="${project}"
    fi
  }

  function t.duetoday {
    t +DUETODAY "$@"
  }

  function t.browse {
    local task_id=${1:-}
    if [[ -z $task_id ]] then
      task_id=$(task ids)
    fi
    local urls=$(
      task +ANNOTATED "$task_id" export \
        | jq -r '.[]? | "\(.uuid)◊\(.description)§\(.annotations[]? | .description)√"' \
        | grep 'https\?://[^ ]\+'
    )
    if [[ -z $urls ]]; then
      >&2 echo "No URLs found in task $task_id"
      return 0
    fi
    local me="$ZDOTDIR/bundle/task/aliases.after"
    echo $urls \
      | sed 's/§/\n  /' \
      | tr '√' '\0' \
      | fzf --height 100% -d '◊' --with-nth=2 --reverse --read0 --no-hscroll --preview-window up:5 \
      --preview "source $me; t.info \$(echo {} | grep -o '^[0-9a-fA-F]*')" \
      | grep -o 'https\?://[^ ]\+' \
      | xargs open
  }

  function tp.browse {
    local project=${_TASK_PROJECT:-}
    echo "Task project:$project"
    local task_ids=$(task project:$project ids)
    t.browse $task_ids
  }

  function t.go {
    local task_id=${1:-}
    if [[ -z $task_id ]] then
      >&2 echo "usage: t.go <task_id> <mods>"
      return 1
    fi
    shift
    t $task_id start 🏁 "$*"
  }

  function t.stop {
    local task_id=${1:-}
    if [[ -z $task_id ]] then
      >&2 echo "usage: t.stop <task_id> <mods>"
      return 1
    fi
    shift
    t $task_id stop 🛑 "$*"
  }

  function t.info {
    local task_id=${1:-}
    if [[ -z $task_id ]] then
      >&2 echo "usage: t.info <task_id>"
      return 1
    fi
    task $task_id export | \
      jq -r '.[]? | "\(.id) - \(.description) (proj:\(.project))", (.annotations[]? | "        \(.description)")' | \
      sed -E 's,https?://[^ ]+,[URL],g'
  }

  function tp.info {
    local project=${_TASK_PROJECT:-}
    echo "Task project:$project"
    t.info project:$project
  }

  function t.cur {
    local task_id=$(task ids +ACTIVE -BLOCKED)
    if [[ -z $task_id ]]; then
      >&2 echo "No active task"
      return 1
    fi
    [[ "${_TASK_CLEAR:-0}" = 1 ]] && clear
    t.info $task_id
  }

  function t.cur.browse {
    local task_id=$(task ids +ACTIVE -BLOCKED)
    if [[ -z $task_id ]]; then
      >&2 echo "No active task"
      return 1
    fi
    t.browse $task_id
  }

  function t.sum {
    local all_proj_override=""
    local proj_override=""
    if [[ "${1:-}" = "-a" ]]; then
      all_proj_override="rc.summary.all.projects=1"
      shift
    fi
    if [[ -n ${1:-} ]]; then
      proj_override="project:$1"
    fi
    t $all_proj_override $proj_override summary
  }

  function t.addsub {
    local task_id=${1:-}
    if [[ -z $task_id ]] then
      >&2 echo "usage: t.addsub <task_id> <mods>"
      return 1
    fi
    shift
    local parent_project=$(task $task_id _project)
    task add project:$parent_project $*
    local new_id=$(task export newest | jq -r '.[0].id')
    task $task_id modify depends:$new_id
    echo "Created subtask $new_id"
  }

  # Routing tasks in the inbox project
  function ti {
    if [[ -z ${1:-} ]]; then
      echo "Listing inbox tasks"
      task project:inbox export | \
        jq -r '.[]? | "\(.id) - \(.description)", (.annotations[]? | "        \(.description)")'
      return 0
    fi
    local task_id="${1:-}"

    local task_info="$(
      task project:inbox $task_id export | \
        jq -r '.[]? | "\(.id) - \(.description)", (.annotations[]? | "        \(.description)")'
      )"
    if [[ -z $task_info ]]; then
      >&2 echo "Task $task_id not found in inbox"
      return 1
    fi

    local new_project="${2:-}"
    if [ -z "${new_project}" -a -n "${_TASK_PROJECT:-}" ]; then
      echo "Task project:${_TASK_PROJECT:-}"
      new_project=${_TASK_PROJECT:-}
    fi
    if [[ -z "$new_project" ]]; then
      echo $task_info
      echo -n "» New project: "; read new_project
    fi

    task $task_id modify project:$new_project
  }
fi


# vim:ft=zsh
