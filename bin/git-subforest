#!/usr/bin/env zsh

set -e

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
CWD=$PWD
SUBTREE_FILE="$CWD/.subtreerefs"

function _pr_header { echo "~~~~~" $@ "~~~~~" }
function _pr_error { echo "ERROR:" $@ >&2 }
function _pr_note { echo "NOTE:" $@ }

function _pr_usage {
  echo "Usage of $NAME"
  echo "  list                               -- list subtrees"
  echo "      (-v)                              \\- (optional) include path and clone url"
  echo "  add name path git-url branch/hash  -- add subtree"
  echo "  update name [branch/hash]          -- update subtree (to optional branch/hash)"
  echo "  remove name                        -- remove subtree"
  echo "  edit                               -- edit subtree file manually"
}

function _main {
  case $1 in
    ("")
      _pr_usage; exit 0
      ;;

    (ls | list)
      shift
      _list $@
      exit 0
      ;;

    (add)
      shift
      _add $@
      exit 0
      ;;

    (update)
      shift
      _update $@
      exit 0
      ;;

    (remove)
      shift
      _remove $@
      exit 0
      ;;

    (edit)
      _edit
      exit 0
      ;;

    (*)
      _pr_error "Unknown args $*"
      _pr_usage; exit 1
      ;;
  esac
}

function _list {
  is_verbose=$1

  if [[ -r "$SUBTREE_FILE" ]]; then
    cat "$SUBTREE_FILE" | while IFS=, read subtree_name subtree_path clone_url branch; do
      echo "- $subtree_name"

      if [[ "-v" = "$is_verbose" ]]; then
        echo "  - Path:  $subtree_path"
        echo "  - Clone: $clone_url"
        echo "  - Branch: $branch"
      fi
    done
  else
    echo "No subtrees added"
  fi
}

function _add {
  subtree_name=$1
  subtree_path=$2
  clone_url=$3
  branch=$4

  if [[ -z "$subtree_name" ]]; then
    _pr_error "Must provide subtree name"; _pr_usage; exit 1
  else
    if known_subtree_line=$(grep "^$subtree_name," $SUBTREE_FILE) ; then
      _pr_error "$subtree_name already stored"; exit 1
    fi
  fi

  if [[ -z "$subtree_path" ]]; then
    _pr_error "Must provide path"; _pr_usage; exit 1
  else
    if [ -d $CWD/$subtree_path ]; then
      _pr_note "$subtree_name already installed at $subtree_path"; return 0
    fi
  fi

  if [[ -z "$clone_url" ]]; then
    _pr_error "Must provide clone url"; _pr_usage; exit 1
  fi

  if [[ -z "$branch" ]]; then
    _pr_error "Must provide branch/hash"; _pr_usage; exit 1
  fi

  if [[ $(git status --ignored --short | wc -l) -gt 0 ]]; then
    _pr_header "Stashing ignored changes"
    git stash push --all
    stashed=1
  fi

  _pr_header "Adding subtree $subtree_name"
  _add_subtree "$subtree_path" "$clone_url" "$branch"

  _pr_header "updating subtree file"
  echo "$subtree_name,$subtree_path,$clone_url,$branch" >> $SUBTREE_FILE

  # sorting helps with merge conflicts
  _pr_header "sorting subtree file"
  sort -o $SUBTREE_FILE $SUBTREE_FILE

  git add $SUBTREE_FILE

  _pr_header "Commiting merge"
  git commit -m "Adding subtree '$subtree_path' from $clone_url ($branch)"

  if [[ stashed -eq 1 ]]; then
    _pr_header "Restoring ignored changes"
    git stash pop
  fi
}

function _update {
  subtree_name=$1
  branch=$2

  if [[ -z "$subtree_name" ]]; then
    _pr_error "Must provide subtree name"; _pr_usage; exit 1
  else
    if known_subtree_line=$(grep "^$subtree_name," $SUBTREE_FILE) ; then
    else
      _pr_error "Unknown subtree named '$subtree_name'"
      _list
      exit 1
    fi
  fi

  echo "$known_subtree_line" \
  | IFS=, read subtree_name subtree_path clone_url known_branch

  if [[ -z "$branch" ]]; then
    branch="$known_branch"
  fi

  if [[ $(git status --ignored --short | wc -l) -gt 0 ]]; then
    _pr_header "Stashing ignored changes"
    git stash push --all
    stashed=1
  fi

  _pr_header "Adding subtree $subtree_name"
  _add_subtree "$subtree_path" "$clone_url" "$branch"

  _pr_header "updating subtree file"
  subtree_name_for_sed=$(echo $subtree_name | sed 's,/,\\/,g')
  if [[ "$(uname)" = Darwin ]]; then
    sed -i '' -e "/^$subtree_name_for_sed,/s/,[^,]*$/,$branch/" $SUBTREE_FILE
  else
    sed -i -e "/^$subtree_name_for_sed,/s/,[^,]*$/,$branch/" $SUBTREE_FILE
  fi

  git add $SUBTREE_FILE

  _pr_header "Commiting merge"
  git commit -m "Updating subtree '$subtree_path' from $clone_url ($branch)"

  if [[ stashed -eq 1 ]]; then
    _pr_header "Restoring ignored changes"
    git stash pop
  fi
}

function _remove {
  subtree_name=$1

  if [[ -z "$subtree_name" ]]; then
    _pr_error "Must provide subtree name"; _pr_usage; exit 1
  else
    if known_subtree_line=$(grep "^$subtree_name," $SUBTREE_FILE) ; then
    else
      _pr_error "Unknown subtree named '$subtree_name'"
      _list
      exit 1
    fi
  fi

  echo "$known_subtree_line" \
  | IFS=, read subtree_name subtree_path clone_url known_branch

  if [[ ! -r "$subtree_path" ]]; then
    _pr_error "Subtree $subtree_name not found at $subtree_path"
    exit 1
  fi

  if [[ $(git status --ignored --short | wc -l) -gt 0 ]]; then
    _pr_header "Stashing ignored changes"
    git stash push --all
    stashed=1
  fi

  _pr_header "Removing subtree $subtree_name"
  git rm -q -r "$subtree_path"

  _pr_header "updating subtree file"
  subtree_name_for_sed=$(echo $subtree_name | sed 's,/,\\/,g')
  if [[ "$(uname)" = Darwin ]]; then
    sed -i '' -e "/^$subtree_name_for_sed,/d" $SUBTREE_FILE
  else
    sed -i -e "/^$subtree_name_for_sed,/d" $SUBTREE_FILE
  fi

  git add $SUBTREE_FILE

  _pr_header "Commiting merge"
  git commit -m "Removing subtree '$subtree_name' from $subtree_path"

  if [[ stashed -eq 1 ]]; then
    _pr_header "Restoring ignored changes"
    git stash pop
  fi
  _pr_header "Removing ignored files"
  rm -rf "$subtree_path"
}

function _edit {
  if [[ -z "$EDITOR" ]]; then
    EDITOR=vim
  fi

  $EDITOR $SUBTREE_FILE

  _pr_header "Subtree file updated."
  _list "-v"
}

function _add_subtree {
  subtree_path=$1
  clone_url=$2
  branch=$3

  echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  _pr_header "Fetching $clone_url at '$branch'"
  git fetch -q -n "$clone_url" "$branch"

  git rev-parse FETCH_HEAD | read subtree_hash

  _pr_header "Squashing $branch ($subtree_hash)"
  noglob git commit-tree $subtree_hash^{tree} -m "
Squashed '$subtree_path' content from commit $(git rev-parse --short $subtree_hash)

git-subtree-dir: $subtree_path
git-subtree-split: $subtree_hash
git-subtree-repo: $clone_url
git-subtree-branch: $branch
" \
  | read squashed_hash

  cat .git/HEAD | read current_hash

  _pr_header "Checking if any .gitmodules in $squashed_hash"
  if [[ $(git ls-tree $squashed_hash .gitmodules | wc -l) -eq 1 ]]; then
    git checkout -q --detach $squashed_hash

    ($SCRIPT_DIR/git-submodule-to-subtree | sed 's,^,    ,')

    _pr_header "Updated submodules"

    cat .git/HEAD | read squashed_hash

    if [[ "$current_hash" == "ref"* ]]; then
      git checkout -q $(echo $current_hash | sed 's,^.*refs/heads/,,')
    else
      git checkout -q --detach $current_hash
    fi
  fi

  _pr_header "Merging squashed commit $squashed_hash"
  git merge -q -s ours --no-commit --allow-unrelated-histories $squashed_hash 2>&1 \
      | sed -e '/Automatic merge went well/d'

  _pr_header "Reading squashed commit onto path '$subtree_path'"
  if [[ -r "$subtree_path" ]]; then
    git rm -q -r "$subtree_path"
  fi
  git read-tree --prefix="$subtree_path" -u $squashed_hash
}

_main $@
